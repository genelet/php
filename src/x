package genelet

import (
        "github.com/golang/glog"
        "fmt"
        "io/ioutil"
        "net/http"
        "net/url"
        "database/sql"
        "encoding/json"
)

type Oauth2 struct {
        Procedure
        Default_pars map[string]string
        Access_token string
}

func New_Oauth2(base Base, db *sql.DB, uri string, provider string) *Oauth2 {
        a := new(Oauth2)
        a.CGI = a
        a.Base = base
        a.Db = db
        a.Uri = uri
        a.Provider = provider
        a.Default_pars = make(map[string]string)
    //a.Default_pars["endpoint"]       = "https://api.linkedin.com/v2/me"
        switch provider {
        case "google":
        a.Default_pars["scope"]          = "profile"
        a.Default_pars["response_type"]  = "code"
        a.Default_pars["grant_type"]     = "authorization_code"
        a.Default_pars["authorize_url"]  = "https://accounts.google.com/o/oauth2/auth"
        a.Default_pars["access_token_url"] = "https://accounts.google.com/o/oauth2/token"
        a.Default_pars["endpoint"]       = "https://www.googleapis.com/oauth2/v1/userinfo"
        case "facebook":
        a.Default_pars["scope"]          = "public_profile%20email"
        a.Default_pars["authorize_url"]  = "https://www.facebook.com/dialog/oauth"
        a.Default_pars["access_token_url"] = "https://graph.facebook.com/oauth/access_token"
        a.Default_pars["endpoint"]       = "https://graph.facebook.com/me"
        a.Default_pars["fields"]         = "id,email,name,first_name,last_name,age_range,gender"
    case "linkedin":
    a.Default_pars["scope"]          = "r_basicprofile"
    a.Default_pars["authorize_url"]  = "https://www.linkedin.com/oauth/v2/authorization"
    a.Default_pars["access_token_url"] = "https://www.linkedin.com/oauth/v2/accessToken"
        a.Default_pars["grant_type"]     = "authorization_code"
    a.Default_pars["endpoint"]       = "https://api.linkedin.com/v1/people/~"
        case "qq":
        a.Default_pars["scope"]          = "get_user_info"
        a.Default_pars["authorize_url"]  = "https://graph.qq.com/oauth2.0/authorize"
        a.Default_pars["access_token_url"] = "https://graph.qq.com/oauth2.0/token"
        a.Default_pars["grant_type"]     = "authorization_code"
        a.Default_pars["endpoint"]       = "https://graph.qq.com/user/get_user_info"
        a.Default_pars["fields"]         = "nickname, gender"
        case "microsoft":
        a.Default_pars["response_type"]  = "code"
        a.Default_pars["scope"]          = "wl.basic%20wl.offline_access%20wl.emails%20wl.skydrive"
        a.Default_pars["authorize_url"]  = "https://oauth.live.com/authorize"
        a.Default_pars["access_token_url"] = "https://oauth.live.com/token"
        a.Default_pars["grant_type"]     = "authorization_code"
        a.Default_pars["token_method_get"] = "1"
        a.Default_pars["endpoint"]       = "https://apis.live.net/v5.0/me"
        case "salesforce":
        a.Default_pars["response_type"]  = "code"
        a.Default_pars["grant_typ"]      = "authorization_code"
        a.Default_pars["authorize_url"]  = "https://login.salesforce.com/services/oauth2/authorize"
        a.Default_pars["access_token_url"] = "https://login.salesforce.com/services/oauth2/token"
        a.Default_pars["endpoint"]       = "https://login.salesforce.com/id/"
        }

        role := base.C.Roles[base.Role_value]
        issuer := role.Issuers[provider]
        for k, v := range issuer.Provider_pars {
                a.Default_pars[k] = v
        }

        return a
}

func (self *Oauth2) Authenticate(login, password string) error {
        defaults := self.Default_pars
        if _, ok := defaults["state"]; !ok {
                defaults["state"] = fmt.Sprintf("%d", Unix_timestamp())
        }
        cbk := self.Callback_address()
glog.Infof("First set: %s - %s - %s\n", login, password, self.Uri)
        if (login == "") {
                if (password != "") { return Err(400) }
                dest := defaults["authorize_url"] + "?client_id=" + defaults["client_id"] + "&redirect_uri=" + url.QueryEscape(cbk)
                for _, k := range []string{"scope", "display", "state", "response_type", "access_type", "approval_prompt"} {
                        if v, ok := defaults[k]; ok {
                                dest += "&" + k + "=" + v
                        }
                }
                return Err(303, dest)
        }

        form := make(url.Values)
        form.Set("code", login)
        form.Set("client_id", defaults["client_id"])
        form.Set("client_secret", defaults["client_secret"])
        form.Set("redirect_uri", cbk)
        if (defaults["grant_type"] != "") {
                form.Set("grant_type", defaults["grant_type"])
        }
glog.Infof("get access token use form: %#v\n", form)

        var res *http.Response
        var err error
        if _, ok := defaults["token_method_get"]; ok {
                res, err = http.Get(defaults["access_token_url"]+"?"+form.Encode())
        } else {
                res, err = http.PostForm(defaults["access_token_url"], form)
        }
    if err != nil { return err }
        body, err := ioutil.ReadAll(res.Body)
        res.Body.Close()
        if err != nil { return err }
glog.Infof("returned body is: %s\n", body)
        if res.StatusCode != 200  { return Err(res.StatusCode) }

        back := make(map[string]interface{})
        switch self.Provider {
        case "facebook":
                m, err := url.ParseQuery(string(body))
                if (err != nil) { return Err(1400) }
                back["access_token"] = m.Get("access_token")
                back["expires"] = m.Get("expires")
        default:
                err := json.Unmarshal(body, &back)
                if (err != nil) { return err }
        }
        if access_token, ok := back["access_token"]; ok {
                self.Access_token = access_token.(string)
        } else {
                return Err(1401)
        }

        if endpoint, ok := defaults["endpoint"]; ok {
                form = make(url.Values)
                for k, v := range back {
                        if k == "access_token" { continue }
                        form.Set(k, Interface2String(v))
                }
glog.Infof("get endpoint use form: %#v\n", form)
                h := make(map[string]string)
                if self.Provider == "salesforce" { endpoint = form.Get("id") }
                if self.Provider == "facebook" { form.Set("fields",defaults["fields"]) }
                if self.Provider == "linkedin" { h["x-li-format"] = "json" }
                if back1, err := self.Oauth2_api("GET", endpoint, form, h); err == nil {
                        for k, v := range back1 { back[k] = v }
                } else {
                        return err
                }
        }
        for k, v := range defaults { back[k] = v }
glog.Infof("final hash sent to fill provider: %#v\n", back)

        return self.Fill_provider(back)
}
func (self *Oauth2) oauth2_request(method string, uri string, form url.Values, h map[string]string) ([]byte, error) {
        if self.Default_pars["grant_type"]=="authorization_code" {
                h["Authorization"] = "Bearer " + self.Access_token
                return Do(method, uri, nil, h)
        }
        form.Set("access_token", self.Access_token)
        return Do(method, uri, form, h)
}

func (self *Oauth2) Oauth2_api(method string, uri string, form url.Values, h map[string]string) (map[string]interface{}, error) {
        body, err := self.oauth2_request(method, uri, form, h)
        if err != nil { return nil, err }

        return To_hash(body)
}

func (self *Oauth2) Oauth2_apis(method string, uri string, form url.Values, h map[string]string) ([]map[string]interface{}, error) {
        body, err := self.oauth2_request(method, uri, form, h)
        if err != nil { return nil, err }

        return To_slice(body)
}

func (self *Oauth2) multipart_request(uri string, form url.Values, paramName, path string) ([]byte, error) {
    hash := self.Default_pars
        if hash["grant_type"]=="authorization_code" {
                h := make(map[string]string)
                h["Authorization"] = "Bearer " + self.Access_token
        return MultipartUpload(uri, form, h, paramName, path)
        }

        if form==nil { form = make(url.Values) }
        form.Set("access_token", self.Access_token)
        return MultipartUpload(uri, form, nil, paramName, path)
}

func (self *Oauth2) Multipart_upload(uri string, form url.Values, paramName, path string) (map[string]interface{}, error) {
        body, err := self.multipart_request(uri, form, paramName, path)
        if err != nil { return nil, err }

        return To_hash(body)
}

func (self *Oauth2) Multipart_uploads(uri string, form url.Values, paramName, path string) ([]map[string]interface{}, error) {
        body, err := self.multipart_request(uri, form, paramName, path)
        if err != nil { return nil, err }

        return To_slice(body)
}

